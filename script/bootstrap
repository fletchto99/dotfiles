#!/usr/bin/env bash

vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

BOOTSTRAP_DIR="$(cd "$(dirname "$0")" && pwd)"

# Check if the dotfiles are cloned and if not clone them
if [ -d ~/.dotfiles/ ]; then
    echo "[dotfiles] ~/.dotfiles directory already exists! Make sure to git pull to ensure it is up to date"
else
    git clone https://github.com/fletchto99/dotfiles.git ~/.dotfiles
fi

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    vercomp "$(git --version | sed 's/[^0-9\.]*//g')" "2.36.0"
    if [[ $? == 2 ]]; then
        echo "[dotfiles] Installing latest git from source"
        $(git clone https://github.com/git/git ~/.core-git &&
        cd ~/.core-git &&
        sudo apt-get update &&
        sudo apt-get install -y git gcc make libssl-dev libcurl4-openssl-dev \
                            libexpat-dev tcl tk gettext git-email zlib1g-dev &&
        printf '%s\n' prefix=/usr gitexecdir=/usr/lib/git-core NO_TCLTK=1 >>config.mak &&
        sudo make -j8 && sudo make -j8 install)
    fi
fi

# Homebrew process
if [[ "$OSTYPE" != "linux-gnu"* ]]; then
    read -p "[dotfiles] Do you wish to install homebrew? " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Install homebrew
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        # Ensure homebrew is up to date
        brew update
        brew upgrade
    fi

    read -p "[dotfiles] Do you wish to install homebrew defaults? " -n 1 -r
    echo

    COUNTER=0

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        brew bundle --file=~/.dotfiles/Brewfile
        brew autoupdate start
        ((COUNTER++))
    fi

    if [ "$COUNTER" -gt 0 ]; then
        echo "[dotfiles] Cleanuing up installers...."
        brew cleanup
    fi
else
    if ! [ -x "$(command -v zsh)" ]; then
        echo "[dotfiles] Installing ZSH"
        sudo apt install -o Dpkg::Options::="--force-confold" --force-yes -y zsh
        sudo chsh -s $(which zsh)
    else
        echo "[dotfiles] ZSH already installed"
    fi
fi

# Setup iTerm2 Configs if iTerm2 is installed
if [ -d "/Applications/iTerm.app/" ]; then
    read -p "[dotfiles] Do you wish to setup iTerm configs? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Backup old iterm configs
        if [ -d ~/.iterm2 ]; then
            mkdir -p ~/dotfiles_old
            cp -r ~/.iterm2 ~/dotfiles_old
            rm -r ~/.iterm2
        fi

        # Configure iTerm 2 preferences
        ln -s  ~/.dotfiles/.iterm2 ~
        defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
        defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "~/.iterm2"
        sudo dscl . -create /Users/$USER UserShell /usr/local/bin/zsh
    fi
else
    echo "[dotfiles] iTerm not installed, skipping iTerm setup!"
fi

# Link alfred preferences
if [ -d "/Applications/Alfred 4.app/" ]; then
    read -p "[dotfiles] Do you wish to setup alfred 4 configs? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Backup old alfred configs
        if [ -d ~/.alfred ]; then
            mkdir -p ~/dotfiles_old
            cp -r ~/.alfred ~/dotfiles_old
            rm -r ~/.alfred
        fi

        # Configure Alfred preferences
        ln -s  ~/.dotfiles/.alfred ~
    fi
else
    echo "[dotfiles] Alfred not installed, skipping alfred setup!"
fi

# Install Oh My Zsh
if [[ "$OSTYPE" != "linux-gnu"* ]]; then
    read -p "[dotfiles] Do you wish to install Oh-My-ZSH? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        /bin/bash -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    fi
else
    echo "[dotfiles] Installing oh my zsh"
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

files=()
while IFS=  read -r -d $'\0'; do
    files+=($(basename "$REPLY"))
done < <(find ~/.dotfiles/ -maxdepth 1 -name ".*" -type f -print0)

# Link dotfiles
if [[ "$OSTYPE" != "linux-gnu"* ]]; then
    read -p "[dotfiles] Do you wish to link your dotfiles? (old ones will be backed up to ~/dotfiles_old) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        mkdir -p ~/dotfiles_old

        echo "[dotfiles] Linking dotfiles (${files[@]})"

        for file in "${files[@]}"; do
            if [ -f ~/$file ]; then
                cp -L ~/$file ~/dotfiles_old/$file
                rm -f ~/$file
            fi
            ln -s ~/.dotfiles/$file ~/$file
        done

        # Special case .ssh
        mkdir -p ~/.ssh
        for file in ~/.dotfiles/.ssh/*; do
            if [ -f ~/.ssh/$(basename $file) ]; then
                mkdir -p ~/dotfiles_old/.ssh
                cp ~/.ssh/$(basename $file) ~/dotfiles_old/.ssh/$(basename $file)
                rm -f ~/.ssh/$(basename $file)
            fi
            ln -s $file ~/.ssh/$(basename $file)
        done

        # Special case .gpg
        mkdir -p ~/.gnupg
        for file in ~/.dotfiles/.gnupg/*; do
            if [ -f ~/.gnupg/$(basename $file) ]; then
                mkdir -p ~/dotfiles_old/.gnupg
                cp ~/.gnupg/$(basename $file) ~/dotfiles_old/.gnupg/$(basename $file)
                rm -f ~/.gnupg/$(basename $file)
            fi
            ln -s $file ~/.gnupg/$(basename $file)
        done

        gpgconf --kill gpg-agent
    fi
else
    echo "[dotfiles] Linking dotfiles (${files[@]})"
    mkdir -p ~/dotfiles_old

    for file in "${files[@]}"; do
        if [ -f ~/$file ]; then
            cp -L ~/$file ~/dotfiles_old/$file
            rm -f ~/$file
        fi
        ln -s ~/.dotfiles/$file ~/$file
    done

    echo "[dotfiles] Setting up auto-suggestions"
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
fi

# Setup apple default preferences
if [[ "$OSTYPE" != "linux-gnu"* ]]; then
    read -p "[dotfiles] Do you wish to setup some Apple defaults? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        $BOOTSTRAP_DIR/macos
    fi
fi

echo "[dotfiles] Finished setting up dotfiles..."
